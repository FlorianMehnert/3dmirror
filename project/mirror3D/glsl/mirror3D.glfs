#version 400

#define OUT_OF_BOUNDS 1
#define DIVISION_BY_ZERO 2
#define DIVERGENCE 3
#define MAX_ITERATIONS_REACHED 4
#define PI 3.14159265359
#define NO_SURFACE 5
#define SURFACE 6
#define BEHIND 7
#define IN_FRONT 8

uniform bool render_quads;
uniform int coloring;
uniform sampler2D depth_image;
uniform sampler2D distortion_map;
uniform sampler2D color_image;
uniform vec2 viewport_dims;
uniform bool interpolate_view_matrix;
uniform float depth_in_which_to_lookup;
uniform float depth_scale = 0.001;
uniform int raymarch_limit;
uniform float ray_length_m;
uniform float view;
uniform bool show_marched_depth;
uniform bool show_sampled_depth;


// this is adapted point.glfs

// vertex_position[4] contains position of passed triangle strip: t1: 0,1,2 - t2: 1,2,3 
in POINT_FS {
	vec4 color;
	float depth_offset;
	vec3 normal;
} fi;

// ***** begin interface of camera.glsl *******************************
#define CONVERGENCE 0
#define SUCCESS 0
uniform float inversion_epsilon;
struct calibration
{
	int w;
	int h;
	float max_radius_for_projection;
	vec2 dc;
	float k[6];
	float p[2];
	float skew;
	vec2 c, s;
};
vec2 image_to_pixel_coordinates(in vec2 x, in calibration calib);
vec2 pixel_to_image_coordinates(in vec2 p, in calibration calib);
vec2 texture_to_pixel_coordinates(in vec2 t, in calibration calib);
vec2 pixel_to_texture_coordinates(in vec2 p, in calibration calib);
int apply_distortion_model(in vec2 xd, out vec2 xu, out mat2 J, in calibration calib);
int apply_distortion_model(in vec2 xd, out vec2 xu, out mat2 J, float epsilon, in calibration calib);
int invert_distortion_model(in vec2 xu, inout vec2 xd, bool use_xd_as_initial_guess, in calibration calib);
// ***** end interface of camera.glsl *********************************

// ***** begin interface of fragment.glfs *****************************
uniform float gamma = 2.2;
void finish_fragment(vec4 color);
void finish_fragment(vec4 color, float depth);
// ***** end interface of fragment.glfs *******************************

// ***** begin interface of holo_disp.glfs ****************************
void compute_sub_pixel_rays(out vec3 ro[3], out vec3 rd[3]);
bool finalize_sub_pixel_fragment(in vec3 rgb, in vec3 depth);
void stereo_translate_modelview_matrix(in float eye, in out mat4 M);
float view_from_fragment_component (const vec2 frag, const int component);
// ***** end interface of holo_disp.glfs ******************************

// ***** begin interface of view.glsl *********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_inverse_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
// ***** end interface of view.glsl ***********************************

// ***** begin interface of rgbd.glsl *********************************
uint get_depth_width();
uint get_depth_height();
uint lookup_depth(ivec2 xp);
bool construct_point(in vec2 xp, in float depth, out vec3 p);
bool lookup_color(vec3 p, out vec4 c);
bool lookup_color(vec3 p, float eps, out vec4 c);
// ***** end interface of rgbd.glsl ***********************************

// ***** begin interface of mirror3D.glsl *****************************
vec4 kinect_to_world_space(vec2 uv);
mat4 get_modelview_matrix_view(int color_channel);
vec4 intersect_depth_image_bf();
float get_depth(ivec2 xp);
struct Ray{
	vec3 origin;
	vec3 direction;
};
vec3 vec3_ray(Ray ray);
void set_raylength(Ray inray, out Ray outray, int s, float step_width);
vec4 pixel_coordinates_to_color(vec2 xp);
mat2 rotate_2d(float rotation);
bool inverse_construct_point(in vec3 p, out vec2 xp, out float depth);
bool inverse_construct_point_v2(in vec3 p, out vec2 xp);
mat4 get_modelview_eye(int channel);
mat4 extractViewMatrix(mat4 MV);
// ***** end interface of mirror3D.glsl *****************************

uniform calibration color_calib;
uniform calibration depth_calib;

void main()
{
	// pure coloring
	if (coloring == 0){
		finish_fragment(fi.color, gl_FragCoord.z + fi.depth_offset);
	
	// calculating normals
	} else if (coloring == 1) {

		finish_fragment(vec4(fi.normal.xyz * 10000, 1.0), gl_FragCoord.z + fi.depth_offset);
	
	// bullying the GPU
	} else if (coloring == 2) {
		finish_fragment(intersect_depth_image_bf(), gl_FragCoord.z + fi.depth_offset);
	
	// working mirror with wrong coordinates
	} else if (coloring == 3) {
		vec3 ro[3], rd[3];
		vec4 hit_color, final_color;
		compute_sub_pixel_rays(ro, rd);
		for (int i=0; i < 3; i++){
			lookup_color(ro[i] + rd[i], hit_color);
			final_color[i] = hit_color[i];
		}
		// remember different modelview matricies for each view inbetween the eyes
		finish_fragment(hit_color, gl_FragCoord.z + fi.depth_offset);
	
	// experimenting
	} else if (coloring == 4) {
		vec3 ro[3], rd[3], eye_sample_clip_space;
		vec2 texture_eye_sample, xu;

		Ray start_ray, current_ray;
		vec4 final_color = vec4(1,0,0,1);
		vec4 color;
		
		compute_sub_pixel_rays(ro, rd);
		
		// *** by hand reconstructing texture pixel space of kinect from ray-origin ***
		float depth;
		bool hit_color[3], befront[3];
		float max_ray_depth, max_sample_depth, ray_depth;
		vec2 xp;
		bool is_terrain = true;
		vec3 marched_ray_depth, sampled_depth;
		vec4 tmp;
		
		for (int c = 0;  c < 3; c++){
			max_ray_depth = 0;
			max_sample_depth = 0;
			hit_color[c] = false;
			int type, prev_type, classify;
			vec3 ray_world, ray_world_correct_direction, p;
			
			for (int s = 1; s < raymarch_limit; s++) {
				ro[c].x = ro[c].x + view;
				ray_world = ro[c] + rd[c] * s * ray_length_m; 
				mat4 view_matrix = extractViewMatrix(get_modelview_matrix());
				mat4 model_matrix = view_matrix * get_inverse_modelview_matrix();
				ray_world_correct_direction = vec3(view_matrix * vec4(ray_world, 1.0));
				float ray_depth = ray_world.z;
				
				ray_world_correct_direction.x = -ray_world_correct_direction.x;
				if (inverse_construct_point_v2(ray_world_correct_direction, xp)) {
					if (xp.x > 512 || xp.x < 0 || xp.y > 512 || xp.y < 0 )
						continue;

					depth = lookup_depth(ivec2(xp));

					if (!bool(depth))
						continue;

					if (depth * depth_scale > ray_depth)
						type = IN_FRONT;
					else
						type = BEHIND;
					
					is_terrain = true;
				} else {
					is_terrain = false;
				}
				if (is_terrain){
					
					if (!construct_point(xp, depth, p))
						continue;
					if (type == BEHIND && prev_type == IN_FRONT) {
						hit_color[c] = true;
						break;
					} else {
						prev_type = type;
					}
				}
			}
			marched_ray_depth = ray_world_correct_direction;

			// debug colors
			sampled_depth[c] = p.z;
			lookup_color(p, color);
			final_color[c] = color[c];	
		}
		
		// catching bad lookups: make black transparent
		if (final_color.xyz == vec3(0,0,0)) {
			final_color.w = .1;
		}

		// debug: check if ever hit
		bool hit_any_color;
		hit_any_color = false;
		for (int i = 0;  i < 3; i++) {
			if (hit_color[i]) {
				hit_any_color = true;
			}
		}
		
		if (!hit_any_color) {
			final_color = vec4 (1,0,0,1);
			discard;
		}

		if (show_marched_depth) {
			final_color = vec4(marched_ray_depth/5, 1.0);
		}
		else if (show_sampled_depth) {
			final_color = vec4(sampled_depth/5, 1.0);
		}
		//final_color = vec4(0,0,lookup_depth(ivec2(xp),1);
		finish_fragment(final_color, gl_FragCoord.z + fi.depth_offset);
	}
}
