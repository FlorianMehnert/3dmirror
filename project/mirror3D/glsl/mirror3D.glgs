#version 330 core

// *** slightly altered point.glgs from cgv/libs/cgv_gl ***

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

uniform bool measure_point_size_in_pixel = true;
uniform bool screen_aligned = true;
uniform float reference_point_size = 1.0;
uniform float viewport_height = 1080.0;
uniform float blend_width_in_pixel = 1.0;
uniform float max_distance = 10.0;
uniform bool construct_quads = false;
uniform bool do_distance_cull = true;

in POINT_GS {
	vec4 color;
	vec4 halo_color;
	float halo_width_in_pixel;
	float percentual_halo_width;
	float depth_offset;
	vec4 adjacentPositions[4];
} gi[];

out POINT_FS {
	vec2 uv;
	vec4 color;
	vec4 halo_color;
	float percentual_blend_width;
	float percentual_core_size;
	float percentual_point_size;
	float percentual_splat_size;
	float depth_offset;
} go;

//***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
//***** end interface of view.glsl ***********************************

//***** begin interface of splat.glsl ***********************************
void prepare_splat(
	in float reference_point_radius, in float pixel_extent,
	in float blend_width_in_pixel, in float halo_width_in_pixel, in float percentual_halo_width,
	out float percentual_core_size, out float percentual_point_size,
	out float percentual_blend_width, out float percentual_splat_size);
//***** end interface of surface.glsl ***********************************

void emit_corner(in vec3 corner_eye, in float u, in float v)
{
	go.uv = vec2(u,v);
	gl_Position	= get_projection_matrix() * vec4(corner_eye,1.0);
	EmitVertex();
}

void main()
{
	if (gi[0].depth_offset > 100000.0)
		return;
	// set color to color attribute
	go.color = gi[0].color;
	go.halo_color = gi[0].halo_color;
	go.depth_offset = gi[0].depth_offset;
	// transform position to eye space
	vec3 center_eye = (get_modelview_matrix()*gl_in[0].gl_Position).xyz;

	// compute splat base vectors
	vec3 dx_eye, dy_eye;
	if (screen_aligned) {
		dx_eye = vec3(1.0 ,0.0, 0.0);
		dy_eye = vec3(0.0, 1.0, 0.0);
	}
	else {
		dx_eye = normalize((get_modelview_matrix()*vec4(1.0 ,0.0, 0.0, 0.0)).xyz);
		dy_eye = normalize((get_modelview_matrix()*vec4(0.0, 1.0, 0.0, 0.0)).xyz);
	}
	// compute extent of a pixel at point depth in eye coordinates
	float pixel_extent = 2.0*abs(center_eye.z/(viewport_height*get_projection_matrix()[1][1]));
	// compute point radius from input point size
	float reference_point_radius = 0.5 * gl_in[0].gl_PointSize * (measure_point_size_in_pixel ?  pixel_extent : reference_point_size);
	// compute splat parameters for fragment shader
	prepare_splat(reference_point_radius, pixel_extent,
	    blend_width_in_pixel, gi[0].halo_width_in_pixel, gi[0].percentual_halo_width,
		go.percentual_core_size, go.percentual_point_size,
		go.percentual_blend_width, go.percentual_splat_size);
	// compute radius of splat
	float splat_radius = reference_point_radius * go.percentual_splat_size;
	// scale by splat radius
	dx_eye *= splat_radius;
	dy_eye *= splat_radius;
	// generate splat vertices
	// alternatively: gl_in[0].gl_Position).xyz > center_eye.z
	// construct quad from 
	//if (do_distance_cull){
		if (max_distance > gl_in[0].gl_Position.z){
			// actually create two triangles from the 4 points
			if (construct_quads){
				// since triangle strip it should create two triangles -> TODO: check if get_projection_matrix() is needed since this might turn the whole quad to view to the direction of the viewer
				// TODO: implement multiple construction cases?
				// TODO: discard if one point is way off
				emit_corner((get_modelview_matrix()*gi[0].adjacentPositions[0]).xyz, go.percentual_splat_size, -go.percentual_splat_size);
		  		emit_corner((get_modelview_matrix()*gi[0].adjacentPositions[1]).xyz, go.percentual_splat_size,  go.percentual_splat_size);
 				emit_corner((get_modelview_matrix()*gi[0].adjacentPositions[3]).xyz, -go.percentual_splat_size, -go.percentual_splat_size);
 				emit_corner((get_modelview_matrix()*gi[0].adjacentPositions[2]).xyz, -go.percentual_splat_size,  go.percentual_splat_size);
			}else {
				emit_corner(center_eye + dx_eye - dy_eye,  go.percentual_splat_size, -go.percentual_splat_size);
				emit_corner(center_eye + dx_eye + dy_eye,  go.percentual_splat_size,  go.percentual_splat_size);
				emit_corner(center_eye - dx_eye - dy_eye, -go.percentual_splat_size, -go.percentual_splat_size);
				emit_corner(center_eye - dx_eye + dy_eye, -go.percentual_splat_size,  go.percentual_splat_size);
			}
			EndPrimitive();
	//	}
	}
}
