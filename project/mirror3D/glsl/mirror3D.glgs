#version 330 core

// *** slightly altered point.glgs from cgv/libs/cgv_gl ***

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

uniform bool measure_point_size_in_pixel = true;
uniform bool screen_aligned = true;
uniform float reference_point_size = 1.0;
uniform float viewport_height = 1080.0;
uniform float blend_width_in_pixel = 1.0;
uniform float max_distance = 10.0;
uniform bool construct_quads = false;
uniform float discard_dst = 0.02;

in POINT_GS {
	vec4 color;
	float depth_offset;
	vec3 adjacentPositions[4];
} gi[];

out POINT_FS {
	vec4 color;
	float depth_offset;
	vec3 normal;
} go;

// ***** begin interface of view.glsl ***********************************
mat4 get_modelview_matrix();
mat4 get_projection_matrix();
mat4 get_modelview_projection_matrix();
mat4 get_inverse_modelview_matrix();
mat4 get_inverse_modelview_projection_matrix();
mat3 get_normal_matrix();
mat3 get_inverse_normal_matrix();
// ***** end interface of view.glsl ***********************************

void emit_corner(in vec3 corner_eye)
{
	gl_Position	= get_projection_matrix() * vec4(corner_eye,1.0);
	EmitVertex();
}

bool depth_difference_ok(){
	return abs(gi[0].adjacentPositions[0].z - gi[0].adjacentPositions[1].z) < discard_dst &&
	abs(gi[0].adjacentPositions[1].z - gi[0].adjacentPositions[2].z) < discard_dst &&
	abs(gi[0].adjacentPositions[2].z - gi[0].adjacentPositions[3].z) < discard_dst &&
	abs(gi[0].adjacentPositions[3].z - gi[0].adjacentPositions[0].z) < discard_dst &&
	abs(gi[0].adjacentPositions[0].z - gi[0].adjacentPositions[2].z) < discard_dst &&
	abs(gi[0].adjacentPositions[0].z - gi[0].adjacentPositions[3].z) < discard_dst &&
	abs(gi[0].adjacentPositions[1].z - gi[0].adjacentPositions[3].z) < discard_dst;
}

void main()
{
	if (gi[0].depth_offset > 100000.0)
		return;
	// set color to color attribute
	go.color = gi[0].color;
	go.depth_offset = gi[0].depth_offset;
	
	if (max_distance > gl_in[0].gl_Position.z){
		// create two triangles from the 4 points
		if (construct_quads){
			// creating a triangle from 0,1,2 and 1,2,3
			if (depth_difference_ok()){
				vec3 a = (get_modelview_matrix() * vec4(gi[0].adjacentPositions[1], 1.0) - get_modelview_matrix() * vec4(gi[0].adjacentPositions[0], 1.0)).xyz;
				vec3 b = (get_modelview_matrix() * vec4(gi[0].adjacentPositions[2], 1.0) - get_modelview_matrix() * vec4(gi[0].adjacentPositions[0], 1.0)).xyz;
				
				go.normal = vec3(
					a.y * b.z - a.z * b.y,
					a.z * b.x - a.x * b.z,
					a.x * b.y - a.y * b.x
				);
				for (int i = 0; i < 4; ++i){
					emit_corner((get_modelview_matrix()*vec4(gi[0].adjacentPositions[i], 1.0)).xyz);
				}
			}
		}
		EndPrimitive();
	}
}
