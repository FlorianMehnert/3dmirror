#version 330 core

//*** altered rgbd_pc_glvs from â€¦project/cgv/libs/rgbd_render/rgbd_pc.glvs ***

#define GEOMETRY_LESS_MODE 0

//***** begin interface of rgbd.glsl ***********************************
uint get_depth_width();
uint get_depth_height();
uint lookup_depth(ivec2 xp);
bool construct_point(in vec2 xp, in float depth, out vec3 p);
bool lookup_color(vec3 p, out vec4 c);
bool lookup_color(vec3 p, float eps, out vec4 c);
//***** end interface of rgbd.glsl ***********************************

uniform bool geometry_less_rendering = false;
uniform bool do_lookup_color = true;
uniform vec4 halo_color = vec4(0.5);
uniform float halo_width_in_pixel = 0.0;
uniform float percentual_halo_width = 0.0;
uniform bool discard_invalid_color_points = true;
uniform vec4 invalid_color = vec4(1.0,0.0,1.0,1.0);

in ivec3 position;
in vec4 color;
in float point_size;
in float depth_offset;

out vec3 adjacentPositions[4]; // Array to hold adjacent positions

out POINT_GS {
	vec4 color;
	vec4 halo_color;
	float halo_width_in_pixel;
	float percentual_halo_width;
	float depth_offset;
} vo;

void main()
{
	ivec2 xp = position.xy;
	uint depth = uint(position.z);
	if (geometry_less_rendering) {
#if GEOMETRY_LESS_MODE == 0
		xp.y = gl_VertexID/int(get_depth_width());
		xp.x = gl_VertexID- xp.y*int(get_depth_width());
#endif
#if GEOMETRY_LESS_MODE == 1
		xp.y = gl_InstanceID;
		xp.x = gl_VertexID;
#endif
#if GEOMETRY_LESS_MODE == 2
		xp.y = gl_InstanceID/int(get_depth_width());
		xp.x = gl_InstanceID - xp.y*int(get_depth_width());
#endif
		depth = lookup_depth(xp);
	}
	vo.depth_offset = depth_offset;
	vec3 p = vec3(0.0);
	if (construct_point(xp, depth, p)) {
		if (do_lookup_color) {
			if (!lookup_color(p, vo.color)) {
				vo.color = invalid_color;
				if (discard_invalid_color_points)
					vo.depth_offset = 200000.0;
			}
		}
		else
			vo.color = color;
		vo.halo_color = halo_color;
		vo.halo_width_in_pixel = halo_width_in_pixel;
		vo.percentual_halo_width = percentual_halo_width;
		gl_Position = vec4(p, 1.0);
		gl_PointSize = point_size;

				// Calculate the position of adjacent vertices and store them in the array
		adjacentPositions[0] = position; // Current vertex
		adjacentPositions[1] = position + vec3(1.0, 0.0, 0.0); // Adjacent right
		adjacentPositions[2] = position + vec3(0.0, 1.0, 0.0); // Adjacent top
		adjacentPositions[3] = position + vec3(1.0, 1.0, 0.0); // Adjacent top-right
	}
	else
		vo.depth_offset = 200000.0;
}